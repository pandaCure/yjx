Based on the given code from a commit, please generate supplementary code files according to the commit message.
####commit message
Replace manual android properties reading with genex's

Since qt6_android_generate_deployment_settings uses 'file(GENERATE'
API now, we can use generator expressions when writing target
properties to deployment setting files.
This adds the generic functions to accumulate list and non-list
target properties and write them to a deployment setting file
with respecitve key.

Change-Id: Ibfdc875c84c39166f26b2f12ab59831d4f9a6e00

####code 
1 # Generate deployment tool json
2 
3 # Locate newest Android sdk build tools revision
4 function(_qt_internal_android_get_sdk_build_tools_revision out_var)
5     if (NOT QT_ANDROID_SDK_BUILD_TOOLS_REVISION)
6         file(GLOB android_build_tools
7             LIST_DIRECTORIES true
8             RELATIVE "${ANDROID_SDK_ROOT}/build-tools"
9             "${ANDROID_SDK_ROOT}/build-tools/*")
10         if (NOT android_build_tools)
11             message(FATAL_ERROR "Could not locate Android SDK build tools under \"${ANDROID_SDK_ROOT}/build-tools\"")
12         endif()
13         list(SORT android_build_tools)
14         list(REVERSE android_build_tools)
15         list(GET android_build_tools 0 android_build_tools_latest)
16     endif()
17     set(${out_var} "${android_build_tools_latest}" PARENT_SCOPE)
18 endfunction()
19 
20 # Generate the deployment settings json file for a cmake target.
21 function(qt6_android_generate_deployment_settings target)
22     # When parsing JSON file format backslashes and follow up symbols are regarded as special
23     # characters. This puts Windows path format into a trouble.
24     # _qt_internal_android_format_deployment_paths converts sensitive paths to the CMake format
25     # that is supported by JSON as well. The function should be called as many times as
26     # qt6_android_generate_deployment_settings, because users may change properties that contains
27     # paths inbetween the calls.
28     _qt_internal_android_format_deployment_paths(${target})
29 
30     # Avoid calling the function body twice because of 'file(GENERATE'.
31     get_target_property(is_called ${target} _qt_is_android_generate_deployment_settings_called)
32     if(is_called)
33         return()
34     endif()
35     set_target_properties(${target} PROPERTIES
36         _qt_is_android_generate_deployment_settings_called TRUE
37     )
38 
39     # Information extracted from mkspecs/features/android/android_deployment_settings.prf
40     if (NOT TARGET ${target})
41         message(SEND_ERROR "${target} is not a cmake target")
42         return()
43     endif()
44 
45     get_target_property(target_type ${target} TYPE)
46 
47     if (NOT "${target_type}" STREQUAL "MODULE_LIBRARY")
48         message(SEND_ERROR "QT_ANDROID_GENERATE_DEPLOYMENT_SETTINGS only works on Module targets")
49         return()
50     endif()
51 
52     get_target_property(target_source_dir ${target} SOURCE_DIR)
53     get_target_property(target_binary_dir ${target} BINARY_DIR)
54     get_target_property(target_output_name ${target} OUTPUT_NAME)
55     if (NOT target_output_name)
56         set(target_output_name ${target})
57     endif()
58     set(deploy_file "${target_binary_dir}/android-${target_output_name}-deployment-settings.json")
59 
60     set(file_contents "{\n")
61     # content begin
62     string(APPEND file_contents
63         "   \"description\": \"This file is generated by cmake to be read by androiddeployqt and should not be modified by hand.\",\n")
64 
65     # Host Qt Android install path
66     if (NOT QT_BUILDING_QT OR QT_STANDALONE_TEST_PATH)
67         set(qt_path "${QT6_INSTALL_PREFIX}")
68         set(android_plugin_dir_path "${qt_path}/${QT6_INSTALL_PLUGINS}/platforms")
69         set(glob_expression "${android_plugin_dir_path}/*qtforandroid*${CMAKE_ANDROID_ARCH_ABI}.so")
70         file(GLOB plugin_dir_files LIST_DIRECTORIES FALSE "${glob_expression}")
71         if (NOT plugin_dir_files)
72             message(SEND_ERROR
73                 "Detected Qt installation does not contain qtforandroid_${CMAKE_ANDROID_ARCH_ABI}.so in the following dir:\n"
74                 "${android_plugin_dir_path}\n"
75                 "This is most likely due to the installation not being a Qt for Android build. "
76                 "Please recheck your build configuration.")
77             return()
78         else()
79             list(GET plugin_dir_files 0 android_platform_plugin_path)
80             message(STATUS "Found android platform plugin at: ${android_platform_plugin_path}")
81         endif()
82     endif()
83 
84     set(qt_android_install_dir "${QT6_INSTALL_PREFIX}")
85     file(TO_CMAKE_PATH "${qt_android_install_dir}" qt_android_install_dir_native)
86     string(APPEND file_contents
87         "   \"qt\": \"${qt_android_install_dir_native}\",\n")
88 
89     # Android SDK path
90     file(TO_CMAKE_PATH "${ANDROID_SDK_ROOT}" android_sdk_root_native)
91     string(APPEND file_contents
92         "   \"sdk\": \"${android_sdk_root_native}\",\n")
93 
94     # Android SDK Build Tools Revision
95     _qt_internal_android_get_sdk_build_tools_revision(QT_ANDROID_SDK_BUILD_TOOLS_REVISION)
96     string(APPEND file_contents
97         "   \"sdkBuildToolsRevision\": \"${QT_ANDROID_SDK_BUILD_TOOLS_REVISION}\",\n")
98 
99     # Android NDK
100     file(TO_CMAKE_PATH "${CMAKE_ANDROID_NDK}" android_ndk_root_native)
101     string(APPEND file_contents
102         "   \"ndk\": \"${android_ndk_root_native}\",\n")
103 
104     # Setup LLVM toolchain
105     string(APPEND file_contents
106         "   \"toolchain-prefix\": \"llvm\",\n")
107     string(APPEND file_contents
108         "   \"tool-prefix\": \"llvm\",\n")
109     string(APPEND file_contents
110         "   \"useLLVM\": true,\n")
111 
112     # NDK Toolchain Version
113     string(APPEND file_contents
114         "   \"toolchain-version\": \"${CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION}\",\n")
115 
116     # NDK Host
117     string(APPEND file_contents
118         "   \"ndk-host\": \"${ANDROID_NDK_HOST_SYSTEM_NAME}\",\n")
119 
120     if (CMAKE_ANDROID_ARCH_ABI STREQUAL "x86")
121         set(arch_value "i686-linux-android")
122     elseif (CMAKE_ANDROID_ARCH_ABI STREQUAL "x86_64")
123         set(arch_value "x86_64-linux-android")
124     elseif (CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
125         set(arch_value "aarch64-linux-android")
126     else()
127         set(arch_value "arm-linux-androideabi")
128     endif()
129 
130     # Architecture
131     string(APPEND file_contents
132         "   \"architectures\": { \"${CMAKE_ANDROID_ARCH_ABI}\" : \"${arch_value}\" },\n")
133 
134     # deployment dependencies
135     _qt_internal_add_android_deployment_multi_value_property(file_contents ${target}
136          "QT_ANDROID_DEPLOYMENT_DEPENDENCIES" "dependencies")
137 
138     # Extra plugins
139     _qt_internal_add_android_deployment_multi_value_property(file_contents ${target}
140         "QT_ANDROID_EXTRA_PLUGINS" "android-extra-plugins")
141 
142     # Extra libs
143     _qt_internal_add_android_deployment_multi_value_property(file_contents ${target}
144         "QT_ANDROID_EXTRA_LIBS" "android-extra-libs")
145 
146     # package source dir
147     _qt_internal_add_android_deployment_property(file_contents ${target}
148         "_qt_android_native_package_source_dir" "android-package-source-directory")
149 
150     # version code
151     _qt_internal_add_android_deployment_property(file_contents ${target}
152         "QT_ANDROID_VERSION_CODE" "android-version-code")
153 
154     # version name
155     _qt_internal_add_android_deployment_property(file_contents ${target}
156         "QT_ANDROID_VERSION_NAME" "android-version-name")
157 
158     # minimum SDK version
159     _qt_internal_add_android_deployment_property(file_contents ${target}
160         "QT_ANDROID_MIN_SDK_VERSION" "android-min-sdk-version")
161 
162     # target SDK version
163     _qt_internal_add_android_deployment_property(file_contents ${target}
164         "QT_ANDROID_TARGET_SDK_VERSION" "android-target-sdk-version")
165 
166     # QML import paths
167     _qt_internal_add_android_deployment_multi_value_property(file_contents ${target}
168         "_qt_native_qml_import_paths" "qml-import-paths")
169 
170     # QML root paths
171     set_property(TARGET ${target} APPEND PROPERTY QT_QML_ROOT_PATH "${target_source_dir}")
172     _qt_internal_add_android_deployment_list_property(file_contents ${target}
173         "_qt_android_native_qml_root_paths" "qml-root-path")
174 
175     # App binary
176     string(APPEND file_contents
177         "   \"application-binary\": \"${target_output_name}\",\n")
178 
179     # App command-line arguments
180     if (QT_ANDROID_APPLICATION_ARGUMENTS)
181         string(APPEND file_contents
182             "   \"android-application-arguments\": \"${QT_ANDROID_APPLICATION_ARGUMENTS}\",\n")
183     endif()
184 
185     # Override qmlimportscanner binary path
186     set(qml_importscanner_binary_path "${QT_HOST_PATH}/${QT6_HOST_INFO_LIBEXECDIR}/qmlimportscanner")
187     if (WIN32)
188         string(APPEND qml_importscanner_binary_path ".exe")
189     endif()
190     file(TO_CMAKE_PATH "${qml_importscanner_binary_path}" qml_importscanner_binary_path_native)
191     string(APPEND file_contents
192         "   \"qml-importscanner-binary\" : \"${qml_importscanner_binary_path_native}\",\n")
193 
194     # Override rcc binary path
195     set(rcc_binary_path "${QT_HOST_PATH}/${QT6_HOST_INFO_LIBEXECDIR}/rcc")
196     if (WIN32)
197         string(APPEND rcc_binary_path ".exe")
198     endif()
199     file(TO_CMAKE_PATH "${rcc_binary_path}" rcc_binary_path_native)
200     string(APPEND file_contents
201         "   \"rcc-binary\" : \"${rcc_binary_path_native}\",\n")
202 
203     # Extra prefix paths
204     foreach(prefix IN LISTS CMAKE_FIND_ROOT_PATH)
205         if (NOT "${prefix}" STREQUAL "${qt_android_install_dir_native}"
206             AND NOT "${prefix}" STREQUAL "${android_ndk_root_native}")
207             file(TO_CMAKE_PATH "${prefix}" prefix)
208             list(APPEND extra_prefix_list "\"${prefix}\"")
209         endif()
210     endforeach()
211     string (REPLACE ";" "," extra_prefix_list "${extra_prefix_list}")
212     string(APPEND file_contents
213         "   \"extraPrefixDirs\" : [ ${extra_prefix_list} ],\n")
214 
215     # Extra library paths that could be used as a dependency lookup path by androiddeployqt.
216     #
217     # Unlike 'extraPrefixDirs', the 'extraLibraryDirs' key doesn't expect the 'lib' subfolder
218     # when looking for dependencies.
219     _qt_internal_add_android_deployment_list_property(file_contents ${target}
220         "_qt_android_extra_library_dirs" "extraLibraryDirs")
221 
222     if(QT_FEATURE_zstd)
223         set(is_zstd_enabled "true")
224     else()
225         set(is_zstd_enabled "false")
226     endif()
227     string(APPEND file_contents
228         "   \"zstdCompression\": ${is_zstd_enabled},\n")
229 
230     # Last item in json file
231 
232     # base location of stdlibc++, will be suffixed by androiddeploy qt
233     # Sysroot is set by Android toolchain file and is composed of ANDROID_TOOLCHAIN_ROOT.
234     set(android_ndk_stdlib_base_path "${CMAKE_SYSROOT}/usr/lib/")
235     string(APPEND file_contents
236         "   \"stdcpp-path\": \"${android_ndk_stdlib_base_path}\"\n")
237 
238     # content end
239     string(APPEND file_contents "}\n")
240 
241     file(GENERATE OUTPUT ${deploy_file} CONTENT ${file_contents})
242 
243     set_target_properties(${target}
244         PROPERTIES
245             QT_ANDROID_DEPLOYMENT_SETTINGS_FILE ${deploy_file}
246     )
247 endfunction()
248 
249 if(NOT QT_NO_CREATE_VERSIONLESS_FUNCTIONS)
250     function(qt_android_generate_deployment_settings)
251         qt6_android_generate_deployment_settings(${ARGV})
252     endfunction()
253 endif()
254 
255 function(qt6_android_apply_arch_suffix target)
256     get_target_property(target_type ${target} TYPE)
257     if (target_type STREQUAL "SHARED_LIBRARY" OR target_type STREQUAL "MODULE_LIBRARY")
258         set_property(TARGET "${target}" PROPERTY SUFFIX "_${CMAKE_ANDROID_ARCH_ABI}.so")
259     elseif (target_type STREQUAL "STATIC_LIBRARY")
260         set_property(TARGET "${target}" PROPERTY SUFFIX "_${CMAKE_ANDROID_ARCH_ABI}.a")
261     endif()
262 endfunction()
263 
264 if(NOT QT_NO_CREATE_VERSIONLESS_FUNCTIONS)
265     function(qt_android_apply_arch_suffix)
266         qt6_android_apply_arch_suffix(${ARGV})
267     endfunction()
268 endif()
269 
270 # Add custom target to package the APK
271 function(qt6_android_add_apk_target target)
272     get_target_property(deployment_file ${target} QT_ANDROID_DEPLOYMENT_SETTINGS_FILE)
273     if (NOT deployment_file)
274         message(FATAL_ERROR "Target ${target} is not a valid android executable target\n")
275     endif()
276 
277     # Make global apk target depend on the current apk target.
278     if(TARGET apk)
279         add_dependencies(apk ${target}_make_apk)
280         _qt_internal_create_global_apk_all_target_if_needed()
281     endif()
282 
283     set(deployment_tool "${QT_HOST_PATH}/${QT6_HOST_INFO_BINDIR}/androiddeployqt")
284     set(apk_final_dir "$<TARGET_PROPERTY:${target},BINARY_DIR>/android-build")
285     set(apk_intermediate_dir "${CMAKE_CURRENT_BINARY_DIR}/android-build")
286     set(apk_file_name "${target}.apk")
287     set(dep_file_name "${target}.d")
288     set(apk_final_file_path "${apk_final_dir}/${apk_file_name}")
289     set(apk_intermediate_file_path "${apk_intermediate_dir}/${apk_file_name}")
290     set(dep_intermediate_file_path "${apk_intermediate_dir}/${dep_file_name}")
291 
292     # This target is used by Qt Creator's Android support and by the ${target}_make_apk target
293     # in case DEPFILEs are not supported.
294     add_custom_target(${target}_prepare_apk_dir ALL
295         DEPENDS ${target}
296         COMMAND ${CMAKE_COMMAND}
297             -E copy_if_different $<TARGET_FILE:${target}>
298             "${apk_final_dir}/libs/${CMAKE_ANDROID_ARCH_ABI}/$<TARGET_FILE_NAME:${target}>"
299         COMMENT "Copying ${target} binary to apk folder"
300     )
301 
302     # The DEPFILE argument to add_custom_command is only available with Ninja or CMake>=3.20 and make.
303     if (CMAKE_GENERATOR MATCHES "Ninja" OR
304         (CMAKE_VERSION VERSION_GREATER_EQUAL 3.20 AND CMAKE_GENERATOR MATCHES "Makefiles"))
305         # Add custom command that creates the apk in an intermediate location.
306         # We need the intermediate location, because we cannot have target-dependent generator
307         # expressions in OUTPUT.
308         add_custom_command(OUTPUT "${apk_intermediate_file_path}"
309             COMMAND ${CMAKE_COMMAND}
310                 -E copy "$<TARGET_FILE:${target}>"
311                 "${apk_intermediate_dir}/libs/${CMAKE_ANDROID_ARCH_ABI}/$<TARGET_FILE_NAME:${target}>"
312             COMMAND "${deployment_tool}"
313                 --input "${deployment_file}"
314                 --output "${apk_intermediate_dir}"
315                 --apk "${apk_intermediate_file_path}"
316                 --depfile "${dep_intermediate_file_path}"
317                 --builddir "${CMAKE_BINARY_DIR}"
318             COMMENT "Creating APK for ${target}"
319             DEPENDS "${target}" "${deployment_file}"
320             DEPFILE "${dep_intermediate_file_path}")
321 
322         # Create a ${target}_make_apk target to copy the apk from the intermediate to its final
323         # location.  If the final and intermediate locations are identical, this is a no-op.
324         add_custom_target(${target}_make_apk
325             COMMAND "${CMAKE_COMMAND}"
326                 -E copy_if_different "${apk_intermediate_file_path}" "${apk_final_file_path}"
327             DEPENDS "${apk_intermediate_file_path}")
328     else()
329         add_custom_target(${target}_make_apk
330             DEPENDS ${target}_prepare_apk_dir
331             COMMAND  ${deployment_tool}
332                 --input ${deployment_file}
333                 --output ${apk_final_dir}
334                 --apk ${apk_final_file_path}
335             COMMENT "Creating APK for ${target}"
336         )
337     endif()
338     set_property(GLOBAL APPEND PROPERTY _qt_apk_targets ${target})
339     _qt_internal_collect_target_apk_dependencies_defer(${target})
340 endfunction()
341 
342 function(_qt_internal_create_global_apk_target)
343     # Create a top-level "apk" target for convenience, so that users can call 'ninja apk'.
344     # It will trigger building all the apk build targets that are added as part of the project.
345     # Allow opting out.
346     if(NOT QT_NO_GLOBAL_APK_TARGET)
347         if(NOT TARGET apk)
348             add_custom_target(apk COMMENT "Building all apks")
349         endif()
350     endif()
351 endfunction()
352 
353 # The function collects all known non-imported shared libraries that are created in the build tree.
354 # It uses the CMake DEFER CALL feature if the CMAKE_VERSION is greater
355 # than or equal to 3.18.
356 # Note: Users that use cmake version less that 3.18 need to call qt_finalize_project
357 # in the end of a project's top-level CMakeLists.txt.
358 function(_qt_internal_collect_target_apk_dependencies_defer target)
359     # User opted-out the functionality
360     if(QT_NO_COLLECT_BUILD_TREE_APK_DEPS)
361         return()
362     endif()
363 
364     get_property(is_called GLOBAL PROPERTY _qt_is_collect_target_apk_dependencies_defer_called)
365     if(is_called) # Already scheduled
366         return()
367     endif()
368     set_property(GLOBAL PROPERTY _qt_is_collect_target_apk_dependencies_defer_called TRUE)
369 
370     if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.18")
371         cmake_language(EVAL CODE "cmake_language(DEFER DIRECTORY \"${CMAKE_SOURCE_DIR}\"
372             CALL _qt_internal_collect_target_apk_dependencies ${target})")
373     else()
374         # User don't want to see the warning
375         if(NOT QT_NO_WARN_BUILD_TREE_APK_DEPS)
376             message(WARNING "CMake version you use is less than 3.18. APK dependencies, that are a"
377                     " part of the project tree, might not be collected correctly."
378                     " Please call qt_finalize_project in the end of a project's top-level"
379                     " CMakeLists.txt file to make sure that all the APK dependencies are"
380                     " collected correctly."
381                     " You can pass -DQT_NO_WARN_BUILD_TREE_APK_DEPS=ON when configuring the project"
382                     " to silence the warning.")
383         endif()
384     endif()
385 endfunction()
386 
387 # The function collects shared libraries from the build system tree, that might be dependencies for
388 # the main apk targets.
389 function(_qt_internal_collect_target_apk_dependencies target)
390     # User opted-out the functionality
391     if(QT_NO_COLLECT_BUILD_TREE_APK_DEPS)
392         return()
393     endif()
394 
395     get_property(is_called GLOBAL PROPERTY _qt_is_collect_target_apk_dependencies_called)
396     if(is_called)
397         return()
398     endif()
399     set_property(GLOBAL PROPERTY _qt_is_collect_target_apk_dependencies_called TRUE)
400 
401     get_property(apk_targets GLOBAL PROPERTY _qt_apk_targets)
402 
403     _qt_internal_collect_buildsystem_shared_libraries(libs "${CMAKE_SOURCE_DIR}")
404 
405     foreach(lib IN LISTS libs)
406         if(NOT lib IN_LIST apk_targets)
407             list(APPEND extra_prefix_dirs "$<TARGET_FILE_DIR:${lib}>")
408         endif()
409     endforeach()
410 
411     set_target_properties(${target} PROPERTIES _qt_android_extra_library_dirs "${extra_prefix_dirs}")
412 endfunction()
413 
414 # The function recursively goes through the project subfolders and collects targets that supposed to
415 # be shared libraries of any kind.
416 function(_qt_internal_collect_buildsystem_shared_libraries out_var subdir)
417     set(result "")
418     get_directory_property(buildsystem_targets DIRECTORY ${subdir} BUILDSYSTEM_TARGETS)
419     foreach(buildsystem_target IN LISTS buildsystem_targets)
420         if(buildsystem_target AND TARGET ${buildsystem_target})
421             get_target_property(target_type ${buildsystem_target} TYPE)
422             if(target_type STREQUAL "SHARED_LIBRARY" OR target_type STREQUAL "MODULE_LIBRARY")
423                 list(APPEND result ${buildsystem_target})
424             endif()
425         endif()
426     endforeach()
427 
428     get_directory_property(subdirs DIRECTORY "${subdir}" SUBDIRECTORIES)
429     foreach(dir IN LISTS subdirs)
430         _qt_internal_collect_buildsystem_shared_libraries(result_inner "${dir}")
431     endforeach()
432     list(APPEND result ${result_inner})
433     set(${out_var} "${result}" PARENT_SCOPE)
434 endfunction()
435 
436 # This function allows deciding whether apks should be built as part of the ALL target at first
437 # add_executable call point, rather than when the 'apk' target is created as part of the
438 # find_package(Core) call.
439 #
440 # It does so by creating a custom 'apk_all' target as an implementation detail.
441 #
442 # This is needed to ensure that the decision is made only when the value of QT_BUILDING_QT is
443 # available, which is defined in qt_repo_build() -> include(QtSetup), which is included after the
444 # execution of _qt_internal_create_global_apk_target.
445 function(_qt_internal_create_global_apk_all_target_if_needed)
446     if(TARGET apk AND NOT TARGET apk_all)
447         # Some Qt tests helper executables have their apk build process failing.
448         # qt_internal_add_executables that are excluded from ALL should also not have apks built
449         # for them.
450         # Don't build apks by default when doing a Qt build.
451         set(skip_add_to_all FALSE)
452         if(QT_BUILDING_QT)
453             set(skip_add_to_all TRUE)
454         endif()
455 
456         option(QT_NO_GLOBAL_APK_TARGET_PART_OF_ALL
457             "Skip building apks as part of the default 'ALL' target" ${skip_add_to_all})
458 
459         set(part_of_all "ALL")
460         if(QT_NO_GLOBAL_APK_TARGET_PART_OF_ALL)
461             set(part_of_all "")
462         endif()
463 
464         add_custom_target(apk_all ${part_of_all})
465         add_dependencies(apk_all apk)
466     endif()
467 endfunction()
468 
469 # The function converts the target property to a json record and appends it to the output
470 # variable.
471 function(_qt_internal_add_android_deployment_property out_var target property json_key)
472     set(property_genex "$<TARGET_PROPERTY:${target},${property}>")
473     string(APPEND ${out_var}
474         "$<$<BOOL:${property_genex}>:"
475             "   \"${json_key}\": \"${property_genex}\"\,\n"
476         ">"
477     )
478 
479     set(${out_var} "${${out_var}}" PARENT_SCOPE)
480 endfunction()
481 
482 # The function converts the target list property to a json list record and appends it to the output
483 # variable.
484 # The generated JSON object is the normal JSON array, e.g.:
485 #    "qml-root-path": ["qml/root/path1","qml/root/path2"],
486 function(_qt_internal_add_android_deployment_list_property out_var target property json_key)
487     set(property_genex
488         "$<TARGET_PROPERTY:${target},${property}>"
489     )
490     set(add_quote_genex
491         "$<$<BOOL:${property_genex}>:\">"
492     )
493     string(JOIN "" list_join_genex
494         "${add_quote_genex}"
495             "$<JOIN:"
496                 "$<GENEX_EVAL:${property_genex}>,"
497                 "\",\""
498             ">"
499         "${add_quote_genex}"
500     )
501     string(APPEND ${out_var}
502         "   \"${json_key}\" : [ ${list_join_genex} ],\n")
503 
504     set(${out_var} "${${out_var}}" PARENT_SCOPE)
505 endfunction()
506 
507 # The function converts the target list property to a json multi-value string record and appends it
508 # to the output variable.
509 # The generated JSON object is a simple string with the list property items separated by commas,
510 # e.g:
511 #    "android-extra-plugins": "plugin1,plugin2",
512 function(_qt_internal_add_android_deployment_multi_value_property out_var target property json_key)
513     set(property_genex
514         "$<TARGET_PROPERTY:${target},${property}>"
515     )
516     string(JOIN "" list_join_genex
517         "$<JOIN:"
518             "$<GENEX_EVAL:${property_genex}>,"
519             ","
520         ">"
521     )
522     string(APPEND ${out_var}
523         "$<$<BOOL:${property_genex}>:"
524             "   \"${json_key}\" : \"${list_join_genex}\",\n"
525         ">"
526     )
527 
528     set(${out_var} "${${out_var}}" PARENT_SCOPE)
529 endfunction()
530 
531 # The function converts paths to the CMake format to make them acceptable for the JSON.
532 # It doesn't overwrite public properties, but instead writes formatted values to internal
533 # properties.
534 function(_qt_internal_android_format_deployment_paths target)
535     get_target_property(qml_import_path ${target} QT_QML_IMPORT_PATH)
536     if (qml_import_path)
537         set(native_qml_import_paths "")
538         foreach(_path IN LISTS qml_import_path)
539             file(TO_CMAKE_PATH "${_path}" _path)
540             list(APPEND native_qml_import_paths "${_path}")
541         endforeach()
542         set_target_properties(${target} PROPERTIES
543             _qt_android_native_qml_import_paths "${native_qml_import_paths}")
544     endif()
545 
546     get_target_property(qml_root_paths ${target} QT_QML_ROOT_PATH)
547     if(qml_root_paths)
548         set(native_qml_root_paths "")
549         foreach(_path IN LISTS qml_root_paths)
550             file(TO_CMAKE_PATH "${_path}" _path)
551             list(APPEND native_qml_root_paths "${_path}")
552         endforeach()
553         set_target_properties(${target} PROPERTIES
554             _qt_android_native_qml_root_paths "${native_qml_root_paths}")
555     endif()
556 
557     get_target_property(package_source_dir ${target} QT_ANDROID_PACKAGE_SOURCE_DIR)
558     if(package_source_dir)
559         file(TO_CMAKE_PATH "${package_source_dir}" native_package_source_dir)
560         set_target_properties(${target} PROPERTIES
561             _qt_android_native_package_source_dir "${native_package_source_dir}")
562     endif()
563 endfunction()
564 
565 if(NOT QT_NO_CREATE_VERSIONLESS_FUNCTIONS)
566     function(qt_android_add_apk_target)
567         qt6_android_add_apk_target(${ARGV})
568     endfunction()
569 endif()
